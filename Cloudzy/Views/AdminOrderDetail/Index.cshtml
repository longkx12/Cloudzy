@model Cloudzy.Models.ViewModels.AdminOrderDetail.DetailViewModel
@{
    ViewData["Title"] = "Chi tiết đơn hàng #" + Model.OrderId;
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">Chi tiết đơn hàng #@Model.OrderId</h6>
            <a href="@Url.Action("Index", "AdminOrder")" class="btn btn-secondary">
                <i class="mdi mdi-arrow-left"></i> Quay lại
            </a>
        </div>
        <div class="card-body">
            <div class="mb-4">
                <h5 class="font-weight-bold">Danh sách sản phẩm</h5>
                <div class="table-responsive">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th style="width: 80px;">Ảnh</th>
                                <th>Sản phẩm</th>
                                <th>Kích thước</th>
                                <th>Giá</th>
                                <th>Số lượng</th>
                                <th>Thành tiền</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.OrderItems)
                            {
                                <tr>
                                    <td>
                                        @if (!string.IsNullOrEmpty(item.ProductImage))
                                        {
                                            <img src="@item.ProductImage" alt="@item.ProductName" style="width: 60px; height: 60px; object-fit: cover;">
                                        }
                                        else
                                        {
                                            <img src="/img/no-image.png" alt="No Image" style="width: 60px; height: 60px; object-fit: cover;">
                                        }
                                    </td>
                                    <td>@item.ProductName</td>
                                    <td>@item.SizeName</td>
                                    <td>@item.Price.ToString("N0") đ</td>
                                    <td>@item.Quantity</td>
                                    <td>@item.TotalPrice.ToString("N0") đ</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">Thông tin đơn hàng</h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <strong>Phương thức thanh toán:</strong>
                                <span>@Model.PaymentMethod</span>
                            </div>
                            <div class="mb-3">
                                <strong>Trạng thái đơn hàng:</strong>
                                <span id="orderStatus" class="badge @(Model.Status == "Pending" ? "badge-warning" :
                                                   Model.Status == "Processing" ? "badge-info" :
                                                   Model.Status == "Shipping" ? "badge-primary" :
                                                   Model.Status == "Delivered" ? "badge-success" :
                                                   Model.Status == "Cancelled" ? "badge-danger" : "badge-secondary")">
                                    @Model.Status
                                </span>
                            </div>
                            <div class="mb-3">
                                <strong>Ngày đặt hàng:</strong>
                                <span>@Model.CreatedAt.ToString("dd/MM/yyyy HH:mm")</span>
                            </div>
                            @if (Model.ShipperId.HasValue)
                            {
                                <div class="mb-3">
                                    <strong>Shipper:</strong>
                                    <span>@Model.ShipperName</span>
                                </div>
                            }
                            <div id="orderActions">
                                @if (Model.Status == "Pending")
                                {
                                    <button type="button" id="btnConfirmOrder" class="btn btn-success" data-order-id="@Model.OrderId" data-status="Processing">
                                        <i class="mdi mdi-check"></i> Xác nhận đơn
                                    </button>
                                }
                                else if (Model.Status == "Returned")
                                {
                                    <div class="mb-3">
                                        <strong>Lý do hoàn:</strong>
                                        <span>@Model.ReturnReason</span>
                                    </div>
                                    <button type="button" id="btnConfirmReturn" class="btn btn-success" data-order-id="@Model.OrderId" data-status="Processing">
                                        <i class="mdi mdi-check"></i> Xác nhận hoàn
                                    </button>
                                }
                                else if (Model.Status == "Processing")
                                {
                                    <div class="form-group mb-3">
                                        <div class="d-flex align-items-center">
                                            <strong class="mr-2">Chọn Shipper:</strong>
                                            <select id="shipperSelect" class="form-control">
                                                <option value="">-- Chọn Shipper --</option>
                                                @if (Model.AvailableShippers != null)
                                                {
                                                    @foreach (var shipper in Model.AvailableShippers)
                                                    {
                                                        <option value="@shipper.UserId">@shipper.Fullname</option>
                                                    }
                                                }
                                            </select>
                                        </div>
                                    </div>
                                    <button type="button" id="btnConfirmShipping" class="btn btn-primary" data-order-id="@Model.OrderId" data-status="Shipping">
                                        <i class="mdi mdi-truck"></i> Xác nhận giao hàng
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">Thông tin giao hàng</h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-2">
                                <strong>Tên khách hàng:</strong>
                                <span>@Model.CustomerName</span>
                            </div>
                            <div class="mb-2">
                                <strong>Số điện thoại:</strong>
                                <span>@Model.PhoneNumber</span>
                            </div>
                            <div class="mb-2">
                                <strong>Email:</strong>
                                <span>@Model.Email</span>
                            </div>
                            <div class="mb-2">
                                <strong>Địa chỉ giao hàng:</strong>
                                <span>@Model.ShippingAddress</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Thông tin thanh toán</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Tổng tiền hàng:</span>
                            <span>@Model.Subtotal.ToString("N0") đ</span>
                        </div>
                        @if (Model.DiscountAmount > 0)
                        {
                            <div class="d-flex justify-content-between mb-2">
                                <span>Mã giảm giá (@Model.VoucherCode):</span>
                                <span>-@Model.DiscountAmount?.ToString("N0") đ</span>
                            </div>
                        }
                        <div class="d-flex justify-content-between font-weight-bold">
                            <span>Tổng thanh toán:</span>
                            <span class="text-danger">@Model.TotalPrice.ToString("N0") đ</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script>
    $(document).ready(function () {
        toastr.options = {
            "closeButton": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "timeOut": "3000"
        };

        var toastMessage = '@Html.Raw(TempData["ToastMessage"])';
        var toastType = '@Html.Raw(TempData["ToastType"])';
        if (toastMessage.trim().length > 0) {
            switch (toastType) {
                case 'success':
                    toastr.success(toastMessage, "Thành công!");
                    break;
                case 'error':
                    toastr.error(toastMessage, "Lỗi!");
                    break;
                case 'warning':
                    toastr.warning(toastMessage, "Cảnh báo!");
                    break;
                case 'info':
                    toastr.info(toastMessage, "Thông tin!");
                    break;
                default:
                    toastr.info(toastMessage);
            }
        }

        $(document).on('click', '#btnConfirmOrder', function () {
            var orderId = $(this).data('order-id');
            var status = $(this).data('status');

            $.ajax({
                url: '@Url.Action("UpdateOrderStatusAjax", "AdminOrderDetail")',
                type: 'POST',
                data: { id: orderId, status: status },
                dataType: 'json',
                success: function (response) {
                    if (response.success) {
                        updateOrderStatusBadge(response.newStatus);
                        updateActionButtons(response.newStatus, orderId);
                        showToastrMessage(response.message, 'success');
                    } else {
                        showToastrMessage(response.message, 'error');
                    }
                },
                error: function (xhr, status, error) {
                    console.error("AJAX Error:", xhr, status, error);
                    showToastrMessage('Đã xảy ra lỗi khi cập nhật trạng thái đơn hàng', 'error');
                }
            });
        });

        $(document).on('click', '#btnConfirmReturn', function () {
            var orderId = $(this).data('order-id');
            var status = $(this).data('status');

            $.ajax({
                url: '@Url.Action("UpdateOrderStatusAjax", "AdminOrderDetail")',
                type: 'POST',
                data: { id: orderId, status: status },
                dataType: 'json',
                success: function (response) {
                    if (response.success) {
                        updateOrderStatusBadge(response.newStatus);
                        updateActionButtons(response.newStatus, orderId);
                        showToastrMessage(response.message, 'success');
                    } else {
                        showToastrMessage(response.message, 'error');
                    }
                },
                error: function (xhr, status, error) {
                    console.error("AJAX Error:", xhr, status, error);
                    showToastrMessage('Đã xảy ra lỗi khi cập nhật trạng thái đơn hàng', 'error');
                }
            });
        });

        $(document).on('click', '#btnConfirmShipping', function () {
            var orderId = $(this).data('order-id');
            var status = $(this).data('status');
            var shipperId = $('#shipperSelect').val();
            var shipperName = $('#shipperSelect option:selected').text();

            if (!shipperId) {
                showToastrMessage('Vui lòng chọn shipper trước khi xác nhận giao hàng', 'warning');
                return;
            }

            $.ajax({
                url: '@Url.Action("UpdateOrderStatusAjax", "AdminOrderDetail")',
                type: 'POST',
                data: { id: orderId, status: status, shipperId: shipperId },
                dataType: 'json',
                contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                success: function (response) {
                    console.log("Response:", response);
                    if (response && response.success) {
                        updateOrderStatusBadge(response.newStatus);
                        $('#orderActions').empty();

                        var shipperInfoExists = $('#orderStatus').parent().siblings('.mb-3:contains("Shipper:")').length > 0;

                        if (shipperInfoExists) {
                            $('#orderStatus').parent().siblings('.mb-3:contains("Shipper:")').find('span').text(shipperName);
                        } else {
                            var shipperInfo = $('<div class="mb-3"><strong>Shipper:</strong> <span>' + shipperName + '</span></div>');
                            $('#orderStatus').parent().after(shipperInfo);
                        }

                        showToastrMessage(response.message, 'success');
                    } else {
                        showToastrMessage(response.message || 'Không thể cập nhật trạng thái đơn hàng', 'error');
                    }
                },
                error: function (xhr, status, error) {
                    console.error("AJAX Error:", xhr, status, error);

                    try {
                        var jsonResponse = JSON.parse(xhr.responseText);
                        if (jsonResponse && jsonResponse.message) {
                            showToastrMessage(jsonResponse.message, 'error');
                            return;
                        }
                    } catch (e) {
                        console.error("Error parsing JSON response:", e);
                    }

                    showToastrMessage('Đã xảy ra lỗi khi cập nhật trạng thái đơn hàng', 'error');
                }
            });
        });
    });

    function updateOrderStatusBadge(status) {
        const badgeClass = status === 'Pending' ? 'badge-warning' :
                          status === 'Processing' ? 'badge-info' :
                          status === 'Shipping' ? 'badge-primary' :
                          status === 'Delivered' ? 'badge-success' :
                          status === 'Cancelled' ? 'badge-danger' : 'badge-secondary';

        $('#orderStatus').removeClass('badge-warning badge-info badge-primary badge-success badge-danger badge-secondary')
                         .addClass(badgeClass)
                         .text(status);
    }

    function updateActionButtons(status, orderId) {
        const actionsContainer = $('#orderActions');
        actionsContainer.empty();

        if (status === 'Processing') {
            $.ajax({
                url: '@Url.Action("GetShippers", "AdminOrderDetail")',
                type: 'GET',
                dataType: 'json',
                success: function (shippers) {
                    if (!Array.isArray(shippers)) {
                        console.error("Expected array of shippers but received:", shippers);
                        showToastrMessage('Đã xảy ra lỗi khi tải danh sách shipper', 'error');
                        return;
                    }

                    let shipperOptions = '<option value="">-- Chọn Shipper --</option>';
                    shippers.forEach(function(shipper) {
                        shipperOptions += `<option value="${shipper.id}">${shipper.name}</option>`;
                    });

                    actionsContainer.html(`
                        <div class="form-group mb-3">
                            <div class="d-flex align-items-center">
                                <strong class="mr-2">Chọn Shipper:</strong>
                                <select id="shipperSelect" class="form-control">
                                    ${shipperOptions}
                                </select>
                            </div>
                        </div>
                        <button type="button" id="btnConfirmShipping" class="btn btn-primary" data-order-id="${orderId}" data-status="Shipping">
                            <i class="mdi mdi-truck"></i> Xác nhận giao hàng
                        </button>
                    `);
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching shippers:", xhr, status, error);
                    showToastrMessage('Đã xảy ra lỗi khi tải danh sách shipper', 'error');
                }
            });
        }
    }

    function showToastrMessage(message, type) {
        if (!message) {
            message = 'Thông báo lỗi không xác định';
        }

        switch (type) {
            case 'success':
                toastr.success(message, "Thành công!");
                break;
            case 'error':
                toastr.error(message, "Lỗi!");
                break;
            case 'warning':
                toastr.warning(message, "Cảnh báo!");
                break;
            case 'info':
                toastr.info(message, "Thông tin!");
                break;
            default:
                toastr.info(message);
        }
    }
</script>